{"version":3,"sources":["components/Header/Header.js","components/LoadingSpinner/LoadingSpinner.js","components/GameList/ListElement.js","components/GameList/GameList.js","components/EventPage/EventPage.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","header","Header","Typography","variant","component","href","SpinContainer","div","LoadingSpinner","message","animationProps","useSpring","config","duration","opacity","from","style","CircularProgress","color","LiContainer","ListItemLink","props","ListItem","button","ListElement","game","id","ListItemText","primary","name","corsHelper","ListContainer","GameList","useState","games","setGames","loading","setLoading","idx","useEffect","a","fetch","res","json","data","join","console","log","events","getData","List","aria-label","map","key","index","EPContainer","prettify","str","split","i","charAt","toUpperCase","slice","length","EventPage","useParams","eventData","setEventData","Object","keys","evt","App","className","path","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.740af14a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Typography } from \"@material-ui/core\";\n\nconst HeaderContainer = styled.header`\n  display: flex;\n  padding: 0.5rem 2rem;\n  justify-content: space-between;\n  background: rgb(66, 51, 255);\n  background: linear-gradient(\n    48deg,\n    rgba(66, 51, 255, 1) 0%,\n    rgba(210, 148, 233, 1) 100%\n  );\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  align-items: center;\n\n  & > * {\n    margin: auto;\n  }\n\n  a {\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n\nexport default function Header() {\n  return (\n    <HeaderContainer>\n      <Typography variant=\"h3\" component=\"h1\">\n        <a href=\"/\">Smarkets Top Events </a>\n      </Typography>\n\n      <Typography variant=\"h5\" component=\"h2\">\n        <a href=\"https://jcsdesign.me\">by Josh Simmons</a>\n      </Typography>\n    </HeaderContainer>\n  );\n}\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport styled from \"styled-components\";\nimport { useSpring, animated } from \"react-spring\";\n\nconst SpinContainer = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-top: 10%;\n  h1 {\n    color: #fff;\n  }\n`;\n\nexport default function LoadingSpinner({ message }) {\n  const animationProps = useSpring({\n    config: { duration: 700 },\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  return (\n    <animated.div style={animationProps}>\n      <SpinContainer>\n        <h1>{message}</h1>\n        <CircularProgress color=\"secondary\" />\n      </SpinContainer>\n    </animated.div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport styled from \"styled-components\";\n\nconst LiContainer = styled.div`\n  a {\n    color: #333;\n    text-decoration: none;\n  }\n`;\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nexport default function ListElement({ game }) {\n  return (\n    <LiContainer>\n      <ListItemLink href={`/event/${game.id}`} button>\n        <ListItemText primary={game.name} />\n      </ListItemLink>\n    </LiContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport { useSpring, animated } from \"react-spring\";\nimport styled from \"styled-components\";\n\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\nimport ListElement from \"./ListElement\";\nconst corsHelper = `https://cors-anywhere.herokuapp.com/`;\n\nconst ListContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 2rem;\n\n  > * {\n    margin: auto;\n    width: 100%;\n    max-width: 360px;\n    background-color: lightgrey;\n    border-radius: 5px;\n  }\n\n  .MuiListItem-button:hover {\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nexport default function GameList() {\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(true);\n  let idx = 0;\n  useEffect(() => {\n    const getData = async () => {\n      await setLoading(true);\n      let res = await fetch(\n        // get 20 upcoming or live events\n        `${corsHelper}https://api.smarkets.com/v3/popular/event_ids/?limit=20&state=upcoming&state=live`\n      );\n      let data = await res.json();\n\n      res = await fetch(\n        `${corsHelper}https://api.smarkets.com/v3/events/${data[\n          \"popular_event_ids\"\n        ].join(\",\")}`\n      );\n      data = await res.json();\n      console.log(data);\n      await setGames(data.events);\n      await setLoading(false);\n    };\n    getData();\n  }, []);\n\n  const animationProps = useSpring({\n    config: { duration: 700 },\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  return (\n    <animated.div style={animationProps}>\n      {loading ? (\n        <LoadingSpinner message=\"Retrieving Events\" />\n      ) : (\n        <ListContainer>\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\n            {games.map((game) => {\n              idx++;\n              return (\n                <ListElement key={`gamesli_idx`} game={game} index={idx} />\n              );\n            })}\n          </List>\n        </ListContainer>\n      )}\n    </animated.div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\n\nconst corsHelper = `https://cors-anywhere.herokuapp.com/`;\n\nconst EPContainer = styled.div`\n  background: rgb(107 103 162);\n  border-radius: 5px;\n  padding: 1rem;\n  margin: auto;\n  width: 80%;\n  max-width: 500px;\n  margin-top: 2rem;\n`;\n\nconst prettify = (str) => {\n  return str\n    .split(\"_\")\n    .join(\" \")\n    .split(\" \")\n    .map((i) => `${i.charAt(0).toUpperCase()}${i.slice(1, i.length)}`)\n    .join(\" \");\n};\n\nexport default function EventPage() {\n  let { id } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [eventData, setEventData] = useState({});\n\n  useEffect(() => {\n    const getData = async () => {\n      await setLoading(true);\n      let res = await fetch(\n        // get 20 upcoming or live events\n        `${corsHelper}https://api.smarkets.com/v3/events/${id}`\n      );\n      let data = await res.json();\n\n      console.log(data);\n      await setEventData(data.events[0]);\n      await setLoading(false);\n    };\n    getData();\n  }, []);\n\n  return (\n    <div>\n      {loading ? (\n        <LoadingSpinner message=\"Loading Event Details\" />\n      ) : (\n        <EPContainer>\n          {Object.keys(eventData).map((evt) => {\n            if (typeof eventData[evt] === \"boolean\") {\n              return (\n                <p>\n                  <b>{prettify(evt)}</b>: {eventData[evt] ? \"✅\" : \"❌\"}\n                </p>\n              );\n            } else if (eventData[evt] !== null) {\n              return (\n                <p>\n                  <b>{prettify(evt)}</b>: {eventData[evt]}\n                </p>\n              );\n            }\n          })}\n        </EPContainer>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Header from \"./components/Header/Header\";\nimport GameList from \"./components/GameList/GameList\";\nimport EventPage from \"./components/EventPage/EventPage\";\nimport LoadingSpinner from \"./components/LoadingSpinner/LoadingSpinner\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Router>\n        <Switch>\n          <Route path=\"/event/:id\" children={<EventPage />} />\n          <Route path=\"/\">\n            <GameList />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"typeface-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}